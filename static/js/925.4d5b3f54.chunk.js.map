{"version":3,"file":"static/js/925.4d5b3f54.chunk.js","mappings":"qRAoBMA,EAAeC,EAAAA,MAAW,WAC/B,OACC,0BACC,SAACC,EAAD,SAKGA,EAAWD,EAAAA,MAAW,WAC3B,IAAME,GAASC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAC5CI,GAAWC,EAAAA,EAAAA,MAUjB,OARAC,EAAAA,EAAAA,YAAU,WAGT,OAFAF,GAASG,EAAAA,EAAAA,OAEF,WACNH,GAASI,EAAAA,EAAAA,UAER,KAEI,iCACN,SAAC,KAAD,qCAEa,UAACC,EAAD,WAGD,UAAXT,IAAsB,qEAEvB,SAACU,EAAD,KACA,SAACC,EAAD,aAKID,EAAWZ,EAAAA,MAAW,WAC3B,OAAwCc,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAoBC,EAAAA,EAAAA,QAAuB,MAE3CC,GAAWhB,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKc,aAEpDX,EAAAA,EAAAA,YAAU,WACU,IAAD,EAAdO,IACH,UAAAE,EAAkBG,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAErD,CAACH,IAYJ,OAAO,UAACI,EAAD,CAAgBC,SAVD,SAACC,GACtB,IAAMC,EAAUD,EAAEE,cAEdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,WAAaL,EAAQM,aAAe,KAC9EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAI3B,UACLG,EAASc,KAAI,SAACC,EAAGC,GAAJ,OAAU,SAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,QACxC,gBAAKC,IAAKtB,UAQNmB,EAAwBpC,EAAAA,MAAW,YAAkB,IAAfqC,EAAc,EAAdA,QAC3C,OAAO,UAACG,EAAD,YACN,SAAC,KAAD,CAAMC,GAAE,mBAAcJ,EAAQK,QAA9B,UACC,SAAC,KAAD,CAAQC,IAAKN,EAAQO,OAASC,EAAWC,UAAU,OAAOC,SAAS,YAEpE,UAACC,EAAD,YACC,wBAAKX,EAAQY,YACb,0BAAOZ,EAAQA,mBAQZxB,EAAsDb,EAAAA,MAAW,WACtE,OAA8Bc,EAAAA,EAAAA,UAAS,IAAvC,eAAOuB,EAAP,KAAgBa,EAAhB,KACMhD,GAASC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAE5CI,GAAWC,EAAAA,EAAAA,MAejB,OAAO,UAAC4C,EAAD,YACN,SAAC,KAAD,CAAUC,MAAOf,EAASgB,SALF,SAAC5B,GACzByB,EAAWzB,EAAEE,cAAcyB,UAMf,UAAXlD,GACG,SAAC,KAAD,CAAQoD,QAjBc,WACrBjB,IAGL/B,GAASiD,EAAAA,EAAAA,IAAYlB,IAErBa,EAAW,MAWP,mBACA,SAAC,IAAD,CAAWM,UAAWC,EAAcC,qBAAqB,OAAOC,sBAAsB,eAKtFR,EAAuBS,EAAAA,GAAAA,IAAH,mJAS1B,WAAeC,EAAAA,EAAAA,GAAiB9D,GAEhC,IAAMY,EAAiBiD,EAAAA,GAAAA,IAAH,2RAUIE,EAAAA,EAAAA,OAAAA,gBAKlBvC,EAAiBqC,EAAAA,GAAAA,IAAH,kQAeIE,EAAAA,EAAAA,OAAAA,kBAGlBtB,EAAgBoB,EAAAA,GAAAA,IAAH,sJASKE,EAAAA,EAAAA,OAAAA,kBAGlBd,EAAoBY,EAAAA,GAAAA,IAAH,oIAONE,EAAAA,EAAAA,OAAAA","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, { ChangeEvent, FC, useEffect, useRef, useState } from 'react'\nimport { WithAuthRedirect } from '../../hoc/WithAuthRedirect'\nimport { useDispatch } from 'react-redux'\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/reducers/chat/chatReducer'\nimport { useAppSelector } from '../../redux/store/reduxStore'\nimport styled from 'styled-components'\nimport { theme } from '../../styles/Theme'\nimport { Avatar, BlockTitle, Button, Textarea } from '../../components/styled/Helpers.styled'\nimport { Link } from 'react-router-dom'\nimport { Preloader } from '../../components/common/Preloader/Preloader'\nimport preloaderGif from '../../assets/images/preloader.gif'\nimport userPhoto from '../../assets/images/user.png'\n\nexport type ChatMessageAPIType = {\n\tmessage: string\n\tphoto: string\n\tuserId: number\n\tuserName: string\n}\n\nconst ChatPage: FC = React.memo(() => {\n\treturn (\n\t\t<div>\n\t\t\t<Chat />\n\t\t</div>\n\t)\n})\n\nconst Chat: FC = React.memo(() => {\n\tconst status = useAppSelector(state => state.chat.status)\n\tconst dispatch = useDispatch()\n\n\tuseEffect(() => {\n\t\tdispatch(startMessagesListening())\n\n\t\treturn () => {\n\t\t\tdispatch(stopMessagesListening())\n\t\t}\n\t}, [])\n\n\treturn <>\n\t\t<BlockTitle>\n\t\t\tChat With Other Users\n\t\t</BlockTitle><StyledChatPage>\n\n\t\t{\n\t\t\tstatus === 'error' && <div>PLEASE REFRESH PAGE. WIFI doesn't work</div>\n\t\t}\n\t\t<Messages />\n\t\t<AddMessageFormChatPage />\n\t</StyledChatPage>\n\t</>\n})\n\nconst Messages = React.memo(() => {\n\tconst [isAutoScroll, setIsAutoScroll] = useState(true)\n\tconst messagesAnchorRef = useRef<HTMLDivElement>(null)\n\n\tconst messages = useAppSelector(state => state.chat.messages)\n\n\tuseEffect(() => {\n\t\tif (isAutoScroll) {\n\t\t\tmessagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\n\t\t}\n\t}, [messages])\n\n\tconst scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n\t\tconst element = e.currentTarget\n\n\t\tif (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 300) {\n\t\t\t!isAutoScroll && setIsAutoScroll(true)\n\t\t} else {\n\t\t\tisAutoScroll && setIsAutoScroll(false)\n\t\t}\n\t}\n\n\treturn <StyledMessages onScroll={scrollHandler}>\n\t\t{messages.map((m, i) => <Message key={m.id} message={m} />)}\n\t\t<div ref={messagesAnchorRef}></div>\n\t</StyledMessages>\n})\n\ninterface IMessage {\n\tmessage: ChatMessageAPIType\n}\n\nconst Message: FC<IMessage> = React.memo(({ message }) => {\n\treturn <StyledMessage>\n\t\t<Link to={`/profile/${message.userId}`}>\n\t\t\t<Avatar src={message.photo || userPhoto} maxHeight='80px' maxWidth='80px' />\n\t\t</Link>\n\t\t<DescriptionOfUser>\n\t\t\t<h2>{message.userName}</h2>\n\t\t\t<span>{message.message}</span>\n\t\t</DescriptionOfUser>\n\t</StyledMessage>\n})\n\ninterface IAddMessageFormChatPage {\n}\n\nconst AddMessageFormChatPage: FC<IAddMessageFormChatPage> = React.memo(() => {\n\tconst [message, setMessage] = useState('')\n\tconst status = useAppSelector(state => state.chat.status)\n\n\tconst dispatch = useDispatch()\n\n\tconst sendMessageHandler = () => {\n\t\tif (!message) {\n\t\t\treturn\n\t\t}\n\t\tdispatch(sendMessage(message))\n\n\t\tsetMessage('')\n\t}\n\n\tconst onChangeTextarea = (e: ChangeEvent<HTMLTextAreaElement>) => {\n\t\tsetMessage(e.currentTarget.value)\n\t}\n\n\treturn <StyledAddMessageForm>\n\t\t<Textarea value={message} onChange={onChangeTextarea}></Textarea>\n\t\t{\n\t\t\tstatus !== 'ready'\n\t\t\t\t? <Button onClick={sendMessageHandler}>Send</Button>\n\t\t\t\t: <Preloader preloader={preloaderGif} maxWidthForPreloader='50px' maxHeightForPreloader='50px' />\n\t\t}\n\t</StyledAddMessageForm>\n})\n\nconst StyledAddMessageForm = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\n    gap: 20px;\n`\n\nexport default WithAuthRedirect(ChatPage)\n\nconst StyledChatPage = styled.div`\n    padding: 20px;\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\n    border-bottom-left-radius: 5px;\n    border-bottom-right-radius: 5px;\n    background-color: ${theme.colors.primaryBgColor};\n\n    margin-bottom: 50px;\n`\n\nconst StyledMessages = styled.div`\n    width: 100%;\n    height: 600px;\n\n    display: flex;\n\n    flex-direction: column;\n    gap: 25px;\n\n    padding: 15px;\n    border-radius: 5px;\n\n    overflow-y: auto;\n    margin-bottom: 25px;\n\n    border: 2px solid ${theme.colors.secondaryBgColor};\n`\n\nconst StyledMessage = styled.div`\n    width: 50%;\n    height: 100px;\n\n    display: flex;\n    gap: 20px;\n\n    padding: 15px;\n\n    background-color: ${theme.colors.secondaryBgColor};\n`\n\nconst DescriptionOfUser = styled.div`\n    width: 100%;\n\n    display: flex;\n    flex-direction: column;\n\n    h2 {\n        color: ${theme.colors.primaryAccentColor};\n    }\n`\n"],"names":["ChatPage","React","Chat","status","useAppSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","StyledChatPage","Messages","AddMessageFormChatPage","useState","isAutoScroll","setIsAutoScroll","messagesAnchorRef","useRef","messages","current","scrollIntoView","behavior","StyledMessages","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","i","Message","message","id","ref","StyledMessage","to","userId","src","photo","userPhoto","maxHeight","maxWidth","DescriptionOfUser","userName","setMessage","StyledAddMessageForm","value","onChange","onClick","sendMessage","preloader","preloaderGif","maxWidthForPreloader","maxHeightForPreloader","styled","WithAuthRedirect","theme"],"sourceRoot":""}