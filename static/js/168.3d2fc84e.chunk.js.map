{"version":3,"file":"static/js/168.3d2fc84e.chunk.js","mappings":"4LACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCQnKA,EAA8B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,KACvCC,EAAO,YAD+C,EAATC,GAGnD,OACC,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACC,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,OCPVM,EAAwB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvC,OACC,gBAAKJ,UAAWC,EAAAA,QAAhB,SAA4BG,K,uCCJxBC,GAAcC,EAAAA,EAAAA,GAAiB,IAexBC,GAAsBC,EAAAA,EAAAA,GAA4B,CAC9DC,KAAM,kBAD4BD,EAbZ,SAACE,GACvB,OAAO,kBAAMC,SAAUD,EAAME,aAAtB,WACN,0BACC,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUlB,KAAK,iBAC1BmB,SAAU,CAACC,EAAAA,EAAUZ,GACrBa,YAAY,0BAEpB,0BACC,oDCDH,GAAeC,E,QAAAA,KACdC,EAAAA,EAAAA,KAPuB,SAACC,GACxB,MAAO,CACNC,YAAaD,EAAMC,eAKK,CACxBC,YAAAA,EAAAA,IAEDC,EAAAA,EAJD,ECAqC,SAAC,GAA0C,IAAxCF,EAAuC,EAAvCA,YAAqBC,GAAkB,EAA1BE,OAA0B,EAAlBF,aACtDG,EAAYJ,EAAYK,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACjC,EAAD,CAAuBG,GAAI8B,EAAE9B,GAAIF,KAAMgC,EAAEhC,MAAxBgC,EAAE9B,OAC5D+B,EAAaR,EAAYS,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC7B,EAAD,CAAoBC,QAAS4B,EAAE5B,SAAjB4B,EAAEjC,OAMjE,OACC,iBAAKC,UAAWC,EAAAA,QAAhB,WACC,gBAAKD,UAAWC,EAAAA,aAAhB,SACEyB,KAEF,iBAAK1B,UAAWC,EAAAA,SAAhB,UACE6B,GACD,SAACvB,EAAD,CAAqBI,SAXG,SAACsB,GAC3BV,EAAYU,EAAOC,6B,gJCdRV,EAAmB,SAACW,GAAoB,IAC9CC,EAD6C,0IAElD,WACC,OAAKC,KAAK3B,MAAMe,QACT,SAACU,GAAD,UAAeE,KAAK3B,SADI,SAAC,KAAD,CAAUR,GAAG,eAHK,GACnBoC,EAAAA,WAWhC,OAAOlB,EAAAA,EAAAA,KAJ4B,SAACC,GAAD,MAA2B,CAC7DI,OAAQJ,EAAMkB,KAAKd,UAGbL,CAAoCgB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__6GYIS\",\"dialogsItems\":\"Dialogs_dialogsItems__-GxpS\",\"active\":\"Dialogs_active__ExRe1\",\"messages\":\"Dialogs_messages__Y5ZBD\",\"message\":\"Dialogs_message__WVB8i\"};","import s from '../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { FC } from 'react'\r\n\r\ninterface IDialogItem {\r\n\tid: number\r\n\tname: string\r\n}\r\n\r\nexport const DialogItem: FC<IDialogItem> = ({ name, id }) => {\r\n\tconst path = '/dialogs/' + id\r\n\r\n\treturn (\r\n\t\t<div className={s.dialog + ' ' + s.active}>\r\n\t\t\t<NavLink to={path}>{name}</NavLink>\r\n\t\t</div>\r\n\t)\r\n}","import s from '../Dialogs.module.css'\r\nimport { FC } from 'react'\r\n\r\ninterface IMessage {\r\n\tmessage: string\r\n}\r\n\r\nexport const Message: FC<IMessage> = ({ message }) => {\r\n\treturn (\r\n\t\t<div className={s.message}>{message}</div>\r\n\t)\r\n}","import { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { Textarea } from '../common/FormsControls/FormsControls'\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators'\r\nimport { AddMessageFormPT } from '../../types/types'\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<AddMessageFormPT>) => {\r\n\treturn <form onSubmit={props.handleSubmit}>\r\n\t\t<div>\r\n\t\t\t<Field component={Textarea} name='newMessageBody'\r\n\t\t\t       validate={[required, maxLength50]}\r\n\t\t\t       placeholder='Enter your message' />\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<button>Add message</button>\r\n\t\t</div>\r\n\t</form>\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddMessageFormPT>({\r\n\tform: 'addMessageForm'\r\n})(AddMessageForm)","import { sendMessage } from '../../redux/reducers/dialogs/dialogsReducer'\r\nimport { connect } from 'react-redux'\r\nimport React from 'react'\r\nimport { WithAuthRedirect } from '../../hoc/WithAuthRedirect'\r\nimport { Dialogs } from './Dialogs'\r\nimport { compose } from 'redux'\r\nimport { AppRootStateT } from '../../redux/store/reduxStore'\r\n\r\nconst mapStateToProps = (state: AppRootStateT) => {\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage\r\n\t}\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n\tconnect(mapStateToProps, {\r\n\t\tsendMessage\r\n\t}),\r\n\tWithAuthRedirect\r\n)(Dialogs)\r\n\r\n","import { DialogItem } from './DialogItem/DialogItem'\r\nimport { Message } from './Message/Message'\r\nimport { FC } from 'react'\r\nimport { AddMessageFormPT, DialogsPageT } from '../../types/types'\r\nimport s from './Dialogs.module.css'\r\nimport { AddMessageFormRedux } from './AddMessageForm'\r\n\r\ninterface IDialogs {\r\n\tdialogsPage: DialogsPageT\r\n\tisAuth: boolean\r\n\r\n\tsendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport const Dialogs: FC<IDialogs> = ({ dialogsPage, isAuth, sendMessage }) => {\r\n\tconst dialogsEl = dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name} />)\r\n\tconst messagesEl = dialogsPage.messages.map(m => <Message key={m.id} message={m.message} />)\r\n\r\n\tconst onSendMessageClick = (values: AddMessageFormPT) => {\r\n\t\tsendMessage(values.newMessageBody)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.dialogs}>\r\n\t\t\t<div className={s.dialogsItems}>\r\n\t\t\t\t{dialogsEl}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.messages}>\r\n\t\t\t\t{messagesEl}\r\n\t\t\t\t<AddMessageFormRedux onSubmit={onSendMessageClick} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { AppRootStateT } from '../redux/store/reduxStore'\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n\tclass RedirectComponent extends React.Component<any, any> {\r\n\t\trender() {\r\n\t\t\tif (!this.props.isAuth) return <Redirect to='/login' />\r\n\t\t\treturn <Component {...this.props} />\r\n\t\t}\r\n\t}\r\n\r\n\tconst mapStateToPropsForRedirect = (state: AppRootStateT) => ({\r\n\t\tisAuth: state.auth.isAuth\r\n\t})\r\n\r\n\treturn connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n"],"names":["DialogItem","name","path","id","className","s","to","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","connect","state","dialogsPage","sendMessage","WithAuthRedirect","isAuth","dialogsEl","dialogs","map","d","messagesEl","messages","m","values","newMessageBody","Component","RedirectComponent","this","React","auth"],"sourceRoot":""}